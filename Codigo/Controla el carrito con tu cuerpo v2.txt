<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8" />
    <title>Carrito con Poses Avanzadas</title>
    <link rel="stylesheet" href="/Estilos/estilos_pagina1.css">
    
</head>

<body>
    <h2>Controla el carrito con tu cuerpo üèéÔ∏è</h2>
    <a href="inicio.html"><button>Inicio</button></a>
    <button onclick="init()">Comenzar</button>
    <!-- <button onclick="probarSalto()" style="background: #ff9900; color: white;">Probar salto</button>
    <button onclick="probarFreno()" style="background: #ff5500; color: white;">Probar freno</button> -->

    <div class="contenedor-flex">
        <canvas id="canvas"></canvas>

        <div class="info">
            <div id="estado-carro">Estado: ‚ö™ Detenido</div>
            <h3>Clases detectadas</h3>
            <div id="label-container"></div>
            <div id="debug-info">Esperando inicio...</div>
            <br>
        </div>
    </div>
    <br><br><br><br>
    <div class="carretera" id="fondo-carretera">
        <img id="car" src="/Imagenes/car.png" alt="carro" />
    </div>
    <div class="carre">
        <img src="/Imagenes/carre.jpg" alt="">
    </div>

    <!-- TensorFlow y Teachable Machine -->
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/pose@0.8/dist/teachablemachine-pose.min.js"></script>

    <script>
        const URL = "./my-pose-model/";
        let model, webcam, ctx, labelContainer, maxPredictions;
        let car = document.getElementById("car");
        let estadoCarroTexto = document.getElementById("estado-carro");
        let debugInfo = document.getElementById("debug-info");
        let carPosition = 50; // en porcentaje
        let estaFrenando = false;
        let estaSaltando = false;
        let ultimaAccion = Date.now();
        const tiempoEntreSaltos = 2000; // 2 segundos entre saltos
        const tiempoFreno = 1500; // Tiempo que dura el freno

        // Funci√≥n para probar el salto manualmente
        function probarSalto() {
            if (!estaSaltando && !estaFrenando) {
                saltarCarro();
                debugInfo.innerText = "Prueba manual de salto iniciada";
            } else {
                let razon = "";
                if (estaSaltando) razon = "ya est√° saltando";
                else if (estaFrenando) razon = "est√° frenando";
                debugInfo.innerText = `No se puede saltar ahora (${razon})`;
            }
        }

        // Funci√≥n para probar el freno manualmente
        function probarFreno() {
            if (!estaFrenando && !estaSaltando) {
                frenarCarro();
                debugInfo.innerText = "Prueba manual de freno iniciada";
            } else {
                let razon = "";
                if (estaFrenando) razon = "ya est√° frenando";
                else if (estaSaltando) razon = "carro saltando";
                debugInfo.innerText = `No se puede frenar ahora (${razon})`;
            }
        }

        async function init() {
            // Referencias a elementos
            labelContainer = document.getElementById("label-container");
            debugInfo = document.getElementById("debug-info");

            // Log de inicio
            debugInfo.innerText = "Inicializando...";

            // Cambiar estado inicial
            estadoCarroTexto.innerText = "Estado: üü¢ En movimiento";

            try {
                // Cargar modelo
                debugInfo.innerText = "Cargando modelo de poses...";
                const modelURL = URL + "model.json";
                const metadataURL = URL + "metadata.json";

                model = await tmPose.load(modelURL, metadataURL);
                maxPredictions = model.getTotalClasses();

                debugInfo.innerText = `Modelo cargado. Poses: ${maxPredictions}`;

                // Configurar webcam
                const size = 300;
                debugInfo.innerText = "Configurando webcam...";
                webcam = new tmPose.Webcam(size, size, true);
                await webcam.setup();
                await webcam.play();

                const canvas = document.getElementById("canvas");
                canvas.width = size;
                canvas.height = size;
                ctx = canvas.getContext("2d");

                // Contenedor para mostrar clases
                labelContainer.innerHTML = ""; // Limpiar contenedor
                for (let i = 0; i < maxPredictions; i++) {
                    labelContainer.appendChild(document.createElement("div"));
                }

                // Todo listo
                debugInfo.innerText = "¬°Sistema listo! Esperando poses...";

                // Iniciar bucle
                window.requestAnimationFrame(loop);
            } catch (error) {
                debugInfo.innerText = "Error al inicializar: " + error.message;
                console.error("Error:", error);
            }
        }

        async function loop() {
            webcam.update();
            await predict();
            window.requestAnimationFrame(loop);
        }

        async function predict() {
            try {
                const { pose, posenetOutput } = await model.estimatePose(webcam.canvas);
                const prediction = await model.predict(posenetOutput);

                // Mostrar resultados
                for (let i = 0; i < maxPredictions; i++) {
                    const classPrediction = prediction[i].className + ": " + prediction[i].probability.toFixed(2);
                    labelContainer.childNodes[i].innerText = classPrediction;
                }

                // L√≥gica de movimiento
                let bestClass = "";
                let bestProb = 0;

                for (let i = 0; i < maxPredictions; i++) {
                    if (prediction[i].probability > bestProb) {
                        bestProb = prediction[i].probability;
                        bestClass = prediction[i].className;
                    }
                }

                // Actualizar informaci√≥n de depuraci√≥n
                debugInfo.innerText = `Mejor pose: ${bestClass} (${bestProb.toFixed(2)})`;

                // Solo procesar si la probabilidad es alta
                if (bestProb > 0.7) {
                    procesarAccion(bestClass);
                }

                drawPose(pose);
            } catch (error) {
                debugInfo.innerText = "Error en predicci√≥n: " + error.message;
                console.error("Error en predicci√≥n:", error);
            }
        }

        function procesarAccion(clase) {
            const ahora = Date.now();

            // Log para depuraci√≥n
            debugInfo.innerText = `Procesando acci√≥n: ${clase}`;

            // Manejar las diferentes poses
            switch (clase) {
                case "Izquierda":
                    if (!estaFrenando && carPosition > 5) {
                        carPosition -= 2;
                        car.style.left = carPosition + "%";
                        debugInfo.innerText += " - Moviendo izquierda";
                    }
                    break;

                case "Derecha":
                    if (!estaFrenando && carPosition < 95) {
                        carPosition += 2;
                        car.style.left = carPosition + "%";
                        debugInfo.innerText += " - Moviendo derecha";
                    }
                    break;

                case "Saltar":
                    // Verificar si ha pasado suficiente tiempo desde el √∫ltimo salto
                    if (!estaSaltando && !estaFrenando && ahora - ultimaAccion > tiempoEntreSaltos) {
                        saltarCarro();
                        ultimaAccion = ahora;
                        debugInfo.innerText += " - ¬°SALTANDO!";
                    }
                    break;

                case "Frenar":
                    // Verificar si ha pasado suficiente tiempo desde la √∫ltima acci√≥n
                    if (!estaFrenando && !estaSaltando && ahora - ultimaAccion > tiempoEntreSaltos) {
                        frenarCarro();
                        ultimaAccion = ahora;
                        debugInfo.innerText += " - Frenando";
                    }
                    break;
            }
        }

        function saltarCarro() {
            if (estaSaltando || estaFrenando) {
                debugInfo.innerText = "No se puede saltar ahora: " +
                    (estaSaltando ? "ya est√° saltando" :
                        estaFrenando ? "est√° frenando" : "");
                return;
            }

            try {
                // Actualizar estado
                estaSaltando = true;
                estadoCarroTexto.innerText = "Estado: üîµ Saltando";
                debugInfo.innerText = "SALTANDO: Iniciando animaci√≥n CSS";

                // Aplicar animaci√≥n de salto usando CSS
                car.classList.add("saltando");

                // Remover la clase despu√©s de la animaci√≥n
                setTimeout(() => {
                    car.classList.remove("saltando");
                    estaSaltando = false;

                    // Restaurar estado adecuado
                    if (estaFrenando) {
                        estadoCarroTexto.innerText = "Estado: üü† Frenando";
                    } else {
                        estadoCarroTexto.innerText = "Estado: üü¢ En movimiento";
                    }

                    debugInfo.innerText = "SALTO COMPLETADO";
                }, 800); // Coincide con la duraci√≥n de la animaci√≥n

            } catch (error) {
                debugInfo.innerText = "Error en salto: " + error.message;
                console.error("Error en salto:", error);
                estaSaltando = false;
            }
        }

        function frenarCarro() {
            // Verificar si ya est√° frenando o saltando
            if (estaFrenando || estaSaltando) {
                debugInfo.innerText = "No se puede frenar ahora: " +
                    (estaFrenando ? "ya est√° frenando" :
                        estaSaltando ? "est√° saltando" : "");
                return;
            }

            // Actualizar estado
            estaFrenando = true;
            car.classList.add("frenando");
            estadoCarroTexto.innerText = "Estado: üü† Frenando";
            debugInfo.innerText = "FRENANDO";

            // Remover el freno despu√©s del tiempo establecido
            setTimeout(() => {
                car.classList.remove("frenando");
                estaFrenando = false;

                // Restaurar estado adecuado
                if (estaSaltando) {
                    estadoCarroTexto.innerText = "Estado: üîµ Saltando";
                } else {
                    estadoCarroTexto.innerText = "Estado: üü¢ En movimiento";
                }

                debugInfo.innerText = "Freno liberado";
            }, tiempoFreno);
        }

        function drawPose(pose) {
            if (webcam.canvas) {
                ctx.drawImage(webcam.canvas, 0, 0);
                if (pose) {
                    const minPartConfidence = 0.5;
                    tmPose.drawKeypoints(pose.keypoints, minPartConfidence, ctx);
                    tmPose.drawSkeleton(pose.keypoints, minPartConfidence, ctx);
                }
            }
        }
    </script>
</body>

</html>